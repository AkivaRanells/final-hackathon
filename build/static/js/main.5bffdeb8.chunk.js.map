{"version":3,"sources":["components/navBar.js","components/homepage/homepage.js","components/game-best-tags/UploadPic.js","components/game-best-tags/SocketPage.js","components/game-best-tags/adminInstructions.js","components/game-best-tags/playerInstructions.js","components/game-best-tags/timer.js","components/game-best-tags/game-best-tags.js","components/game-best-tags/images.js","components/login.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","logOut","_this","props","react_default","a","createElement","id","NavLink","to","activeClassName","className","onClick","this","Component","Homepage","Link","type","value","UploadPic","inputValue","onChange","changeInputValue","placeholder","getImageTags","SocketPage","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","componentDidUpdate","state","isAdmin","gameBegan","firstTime","socket","emit","startTime","Date","now","admin","tags","tagsEmit","tagObject","console","log","JSON","stringify","sentUrl","imageURL","length","url","timerFunction","secondsForCountdown","Math","round","startTimer","interval","setInterval","setState","timerStatus","changeGamePhase","clearInterval","seconds","sendMessage","message","username","addMessage","msg","messages","toConsumableArray","concat","changeMessageInLocalState","e","target","firstTimeEmit","io","on","changeTagsInState","urlArray","changeImageURLSInState","userCounter","time","map","name","React","AdminInstructions","PlayerInstructions","Timer","GameBestTags","checkForActiveGame","gameActive","game_best_tags_UploadPic","changeInputValueInLocalState","startTimerInSocket","isAdminState","then","response","data","concepts","tag","imageTags","catch","error","displayTags","addVote","newState","objectSpread","imageURLs","find","image","votes","numberOfVotes","displayImages","src","winningImage","i","event","haveSentURL","adminInstructions","playerInstructions","uploadPic","timer","images","gamePhase","game_best_tags_adminInstructions","game_best_tags_playerInstructions","game_best_tags_timer","game_best_tags_SocketPage","Login","changeNameInLocalState","checkDatabaseForNameEntered","addEnteredNameIntoDatabase","alert","redirectTo","es_Redirect","showError","App","_ref","asyncToGenerator","regenerator_default","mark","_callee","str","wrap","_context","prev","next","Axios","get","sent","currentUser","userFound","stop","_x","apply","arguments","_ref2","_callee2","newUser","_context2","userName","bestTagsTotalScoreHistory","post","err","_x2","num","params","_this2","BrowserRouter","navBar","Route","path","exact","render","Redirect","login","homepage_homepage","game_best_tags_game_best_tags","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5bffdeb8.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport '../styles/NavBar.css'\r\n\r\nclass NavBar extends Component {\r\n\r\n  logOut = () => {\r\n    this.props.logOut()\r\n    //change state of user.userfound to false in App\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Welcome to Best Tags Game!</h1>\r\n        <div id=\"navBar\">\r\n          <NavLink to=\"/HomePage\" activeClassName=\"selectedTab\" className=\"head-tab\">Homepage</NavLink>\r\n          <NavLink to=\"/login\" activeClassName=\"selectedTab\" className=\"head-tab\" onClick={this.logOut}>logout</NavLink>\r\n        </div>\r\n        \r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\n\r\nexport default NavBar;","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport NavBar from '../navBar'\r\nimport '../../styles/homepage.css';\r\n\r\n\r\n\r\nclass Homepage extends Component {\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"homepage\" >\r\n          <Link to=\"/game\" activeClassName=\"selectedTab\" ><input type=\"button\" className=\"button\" value=\"Let's Play!\" /></Link>\r\n          {/* <Link to=\"/game\" activeClassName=\"selectedTab\"><input type=\"button\" className=\"button\" value=\"Join an existing game!\"/></Link>  */}\r\n        </div>\r\n\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\n\r\nexport default Homepage;","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nclass UploadPic extends Component {\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input type=\"text\" value={this.props.inputValue} onChange={this.props.changeInputValue} placeholder=\"Img link goes here\" />\r\n                <button onClick={this.props.getImageTags}>Get Tags!</button>\r\n            </div>\r\n        )\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default UploadPic;","import React from \"react\";\r\nimport io from \"socket.io-client\";\r\n//todo setup functions for image and tags broadcast\r\nclass SocketPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sentUrl: true,\r\n            tagsEmit: false,\r\n            firstTimeEmit: false,\r\n            firstTime: false,\r\n            isAdmin: false,\r\n            startTimer: 0,\r\n            timerStatus: false,\r\n            message: '',\r\n            messages: [],\r\n        };\r\n\r\n        this.socket = io('https://best-tags.herokuapp.com/game');\r\n\r\n        this.socket.on('chat message', (msg) => {\r\n            this.addMessage(msg);\r\n        });\r\n\r\n        this.socket.on('sendTags', (tags) => {\r\n            if (!this.state.tagsEmit) {\r\n                // console.log(tags.tags)\r\n                this.props.changeTagsInState(tags.tags)\r\n                // console.log(this.props.changeTagsInState(tags.tags))\r\n                this.setState({ tagsEmit: true })\r\n                this.props.changeGamePhase(1);\r\n            }\r\n        });\r\n\r\n        this.socket.on(\"sendURL\", (urlArray)=> {\r\n            this.setState({sentUrl:false});\r\n            this.props.changeImageURLSInState(urlArray)\r\n            console.log(urlArray)\r\n        })\r\n\r\n        this.socket.on(\"userCounter\", (userCounter) => {\r\n            this.isAdmin(userCounter);\r\n            if (userCounter === 1) {\r\n                this.setState({ isAdmin: true, firstTime: true });\r\n            }\r\n        })\r\n\r\n        this.socket.on(\"gameBegan\", (time) => {\r\n            if (!this.state.firstTimeEmit) {\r\n                this.setState({ firstTimeEmit: true })\r\n\r\n                // console.log('game has begun' + time.startTime + \"timerStatus\" + time.timerStatus);\r\n                this.setState({ startTimer: time.startTime, timerStatus: time.timerStatus },\r\n                    function () { this.timerFunction() })\r\n            }\r\n        })\r\n\r\n        // this.socket.on('timer', (timer) => {\r\n\r\n        //     if (!this.state.isAdmin) {\r\n\r\n        //         this.setState({ timerStatus: timer.timerStatus, startTimer: timer.startTime, firstTime: false },\r\n        //             function () {\r\n        //                 // console.log('timer function called',this.state.timerStatus ,this.state.startTimer, timer.startTime );\r\n        //                 this.timerFunction();\r\n        //             });\r\n        //     }\r\n        // });\r\n\r\n    }\r\n\r\n    componentDidUpdate = () => {\r\n        // console.log('componentdidupdate');\r\n        // console.log(this.state.isAdmin)\r\n        if (this.state.isAdmin && this.props.gameBegan && this.state.firstTime) {\r\n            // console.log('componentDidUpdate admin' + this.state.isAdmin)\r\n            this.socket.emit('gameBegan', { startTime: Date.now(), admin: this.state.isAdmin })\r\n        }\r\n        if (this.props.tags && !this.state.tagsEmit) {\r\n            // console.log(this.props.tags)\r\n            let tagObject = { tags: this.props.tags }\r\n            \r\n            \r\n            this.socket.emit(\"sendTags\", tagObject)\r\n            \r\n        }\r\n        // console.log(this.props.imageURL, this.state.sentUrl, this.state.isAdmin);\r\n        console.log('componentDidUpdate' + JSON.stringify(this.props))\r\n        console.log('--------')\r\n        console.log(!this.state.isAdmin + '  -  '+  this.state.sentUrl)\r\n\r\n        //This needs some condition to occur only once.\r\n        if(!this.state.isAdmin && this.state.sentUrl && this.props.imageURL.length>0){\r\n            let url = this.props.imageURL;\r\n            console.log(this.props);\r\n            this.socket.emit(\"sendURL\", url);\r\n        }\r\n        // if(!this.state.isAdmin){\r\n        //     let url = this.props.imageURL;\r\n        //     console.log(url);\r\n        //     this.socket.emit(\"sendURL\", url);\r\n        // }\r\n    }\r\n\r\n    timerFunction = () => {\r\n        let secondsForCountdown = Math.round((this.state.startTimer + 60000 - Date.now()) / 1000);\r\n\r\n        // console.log(secondsForCountdown)\r\n        const interval = setInterval(() => {\r\n            secondsForCountdown = secondsForCountdown - 1;\r\n            // console.log(secondsForCountdown,this.state.startTimer)\r\n            if (secondsForCountdown <= 0) {\r\n                // console.log('conditionWorking')\r\n                // console.log(\"Kill timer\")\r\n                this.setState({ timerStatus: false })\r\n                this.props.changeGamePhase(2);\r\n                clearInterval(interval);\r\n            } else {\r\n                this.setState({ seconds: secondsForCountdown })\r\n            }\r\n        }, 1000)\r\n\r\n    }\r\n\r\n    sendMessage = () => {\r\n        // console.log(\"sending\")\r\n        this.socket.emit('chat message', {\r\n            message: this.state.message,\r\n            username: this.socket.id\r\n        })\r\n        this.setState({ message: '' });\r\n    }\r\n\r\n    addMessage = (msg) => {\r\n        // console.log('receiving');\r\n        //send it to the server\r\n        // this.socket.emit('chat message', {\r\n        //     message: this.state.message\r\n        // })\r\n        this.setState({ messages: [...this.state.messages, { username: msg.username, message: msg.message }] }, function () { console.log(this.state.messages); });\r\n    };\r\n\r\n    isAdmin = (value) => {\r\n        this.props.isAdmin(value)\r\n    }\r\n\r\n    changeMessageInLocalState = (e) => {\r\n        // console.log(e.target.value)\r\n        this.setState({ message: e.target.value })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <p>SocketPage</p>\r\n                <div>{this.state.timerStatus ? <p>{this.state.seconds}</p> : <p>Out of Time</p>}</div>\r\n                {this.state.messages.map(message => {\r\n                    return (\r\n                        <div>{message.username} : {message.message}</div>\r\n                    )\r\n                })}\r\n                <input type=\"text\" value={this.state.name} onChange={this.changeMessageInLocalState} />\r\n                <button onClick={this.sendMessage}>Send</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SocketPage\r\n\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport '../../styles/instructions.css'\r\n\r\nclass AdminInstructions extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>Instructions!</h2>\r\n\r\n        <div className=\"admin-instructions-1 instructions\">\r\n          This is your chance to create the game!\r\nAll you have to do is find a picture online, and submit it.\r\n </div>\r\n\r\n        <div className=\"admin-instructions-2 instructions\">\r\n\r\n          When you are done you'll wait while the other players are selecting pics according to the tags YOUR pic provided!\r\n            </div>\r\n        <div className=\"admin-instructions-3 instructions\">\r\n          After all players submit their picture you will be shown all of the players submition, and choose the one you think is the best one!\r\n        {/* Each of the players get one vote only, so vote wisely! */}\r\n        </div>\r\n        <div className=\"admin-instructions-4 instructions\">\r\n          After time is up (or all the players voted), the winner will be anounced!\r\n\r\n            </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\n\r\nexport default AdminInstructions;","import React, { Component } from 'react';\r\nimport '../../styles/instructions.css'\r\n\r\n\r\nclass PlayerInstructions extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>Player instructions!</h2>\r\n\r\n        <div className=\"player-instructions-1 instructions\">\r\n          As you are reading this, one of the players is picking a picture for the game.\r\n       </div>\r\n\r\n        <div className=\"player-instructions-2 instructions\">\r\n\r\n          When he is done you'll see a collection of tags describing the selected pic.\r\n          Your job is to submit for a picture that'll fit the most tags!\r\n              </div>\r\n        <div className=\"player-instructions-3 instructions\">\r\n          After all players submit their picture you will be shown all of the players submition, and choose the one you think is the best one!\r\n          {/* Each of the players get one vote only, so vote wisely! */}\r\n                  </div>\r\n        <div className=\"player-instructions-4 instructions\">\r\n          After time is up (or all the players voted), the winner will be anounced!\r\n\r\n              </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default PlayerInstructions;","import React, { Component } from 'react';\r\n\r\nclass Timer extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\ntimer!       \r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\n\r\nexport default Timer;","import React, { Component } from 'react';\r\nimport NavBar from '../navBar';\r\nimport UploadPic from \"./UploadPic\";\r\nimport SocketPage from './SocketPage';\r\nimport AdminInstructions from './adminInstructions';\r\nimport PlayerInstructions from './playerInstructions';\r\nimport Timer from './timer';\r\nimport Images from './images';\r\nimport '../../styles/game-best-tags.css';\r\n\r\n\r\n\r\nclass GameBestTags extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      gameBegan: false,\r\n      inputValue: \"\",\r\n      gameActive: true,\r\n      imageTags: null,\r\n      imageURLs: [\r\n        { url: \"https://www.rspcansw.org.au/wp-content/uploads/2017/08/50_a-feature_dogs-and-puppies_mobile.jpg\", votes: 0 },\r\n        { url: \"https://www.cesarsway.com/sites/newcesarsway/files/styles/large_article_preview/public/Common-dog-behaviors-explained.jpg?itok=FSzwbBoi\", votes: 0 },\r\n        { url: \"https://images.theconversation.com/files/205966/original/file-20180212-58348-7huv6f.jpeg?ixlib=rb-1.1.0&q=45&auto=format&w=926&fit=clip\", votes: 0 },\r\n        { url: \"https://i2-prod.mirror.co.uk/incoming/article9769854.ece/ALTERNATES/s615/PROD-Mixed-breed-lab-cross-8-week-old-puppy-in-farm-yard-near-Cochrane-AlbertajpgED.jpg\", votes: 0 },\r\n        { url: \"https://img.purch.com/w/660/aHR0cDovL3d3dy5saXZlc2NpZW5jZS5jb20vaW1hZ2VzL2kvMDAwLzA5Ny84OTEvb3JpZ2luYWwvd2h5LWRvZ3MtZWF0LXBvb3A=\", votes: 0 },\r\n        { url: \"https://www.mensjournal.com/wp-content/uploads/gettyimages-583596559-e274095b-2e49-481a-b1d1-de6bfee9e588.jpg\", votes: 0 }\r\n      ],\r\n      haveSentURL: false,\r\n      numberOfVotes: 0\r\n    }\r\n  }\r\n\r\n  // [\"dog\", \"canine\", \"mammal\", \"pet\", \"wolf\", \"cute\"]\r\n\r\n  checkForActiveGame = () => {\r\n    if (this.state.gameActive) {\r\n      // console.log(\"1\")\r\n    }\r\n    else {\r\n      return <UploadPic inputValue={this.state.inputValue} changeInputValue={this.changeInputValueInLocalState} getImageTags={this.getImageTags} />\r\n    };\r\n  }\r\n  startTimerInSocket = () => {\r\n    this.setState({ gameBegan: true, startTime: Date.now() })\r\n  }\r\n\r\n  getImageTags = () => {\r\n    if (this.state.inputValue !== \"\") {\r\n      // this.changeImageURLSInState(this.state.inputValue)\r\n      if (this.props.isAdminState) {\r\n        this.props.getImageTags(this.state.inputValue)\r\n          .then((response) => {\r\n            let tags = response.data.concepts.map(tag => tag.name)\r\n            console.log('Got tags')\r\n            this.setState({ imageTags: tags })\r\n            this.startTimerInSocket();\r\n            this.props.changeGamePhase(1);\r\n          })\r\n          .catch(function (error) {\r\n            console.log(error)\r\n          })\r\n      }\r\n    }\r\n  }\r\n\r\n  displayTags = () => {\r\n    if (this.state.imageTags) {\r\n      return this.state.imageTags.map(tag => {\r\n        return (\r\n          <div className=\"tags\">\r\n             / {tag} /\r\n          </div>)\r\n      }\r\n      )\r\n    }\r\n    // .slice(0, 15)\r\n  }\r\n\r\n  addVote = (url) => {\r\n    let newState = { ...this.state }\r\n    let votedImage = newState.imageURLs.find(image => {\r\n      if (image.url === url) {\r\n        image.votes = image.votes + 1\r\n      }\r\n    });\r\n    newState.numberOfVotes = newState.numberOfVotes + 1;\r\n    this.setState(newState)\r\n    if (this.state.numberOfVotes === 4) {\r\n      this.props.changeGamePhase(3)\r\n    }\r\n  }\r\n\r\n  displayImages = () => {\r\n    if (this.state.imageTags) {\r\n      return this.state.imageURLs.map(image => {\r\n        return (\r\n          <span onClick={() => this.addVote(image.url)}><img src={image.url} className=\"gameImage\"></img> </span>\r\n        )\r\n      })\r\n    }\r\n  }\r\n\r\n  winningImage = () => {\r\n    let winningImage = {\r\n      votes: 0,\r\n      imageURL: \"\"\r\n    }\r\n    for (let i = 0; i < this.state.imageURLs.length; i++) {\r\n      if (this.state.imageURLs[i].votes > winningImage.votes) {\r\n        winningImage.votes = this.state.imageURLs[i].votes\r\n        winningImage.imageURL = this.state.imageURLs[i].url\r\n      }\r\n    }\r\n    return <div>\r\n      <h1>Here's the winning image:</h1>\r\n      <img src={winningImage.imageURL}></img>\r\n    </div>\r\n  }\r\n\r\n  changeInputValueInLocalState = (event) => {\r\n    let newState = { ...this.state };\r\n    newState.inputValue = event.target.value;\r\n    this.setState(newState);\r\n  }\r\n\r\n  isAdmin = (value) => {\r\n    this.props.isAdmin(value)\r\n  }\r\n\r\n  changeTagsInState = (tags) => {\r\n    this.setState({\r\n      imageTags: tags\r\n    })\r\n  }\r\n\r\n  changeImageURLSInState = (urlArray) => {\r\n    if (!this.state.haveSentURL) {\r\n      this.setState({ imageURLs: urlArray, haveSentURL: true }, function () {\r\n        console.log(this.state.imageURLs)\r\n      }\r\n      )\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    let adminInstructions = null;\r\n    let playerInstructions = null;\r\n    let uploadPic = null;\r\n    let timer = null;\r\n    let tags = null;\r\n    let images = null;\r\n    let winningImage = null;\r\n\r\n    if (this.props.isAdminState && this.props.gamePhase === 0) {\r\n      //admin phase 0\r\n      adminInstructions = <AdminInstructions />\r\n      uploadPic = <UploadPic inputValue={this.state.inputValue} changeInputValue={this.changeInputValueInLocalState} getImageTags={this.getImageTags} />\r\n    }\r\n\r\n    if (!this.props.isAdminState && this.props.gamePhase === 0) {\r\n      //player phase 0\r\n      playerInstructions = <PlayerInstructions />\r\n    }\r\n\r\n    if (this.props.isAdminState && this.props.gamePhase === 1) {\r\n      //admin phase 1\r\n      tags = this.displayTags()\r\n      timer = <Timer />\r\n    }\r\n\r\n    if (!this.props.isAdminState && this.props.gamePhase === 1) {\r\n      //player phase 1\r\n      tags = this.displayTags()\r\n      uploadPic = <UploadPic inputValue={this.state.inputValue} changeInputValue={this.changeInputValueInLocalState} getImageTags={this.getImageTags} />\r\n      timer = <Timer />\r\n    }\r\n\r\n    if (this.props.gamePhase === 2) {\r\n      //phase 2\r\n      // console.log(\"gamePhase2\")\r\n      tags = this.displayTags()\r\n      images = this.displayImages()\r\n    }\r\n\r\n    if (this.props.gamePhase === 3) {\r\n      //phase 3 \r\n      winningImage = this.winningImage()\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        {adminInstructions}\r\n        {playerInstructions}\r\n        {uploadPic}\r\n        <div className=\"gameBox\">\r\n          {tags}\r\n          {timer}\r\n          <div></div>\r\n          {images}\r\n          {winningImage}\r\n        </div>\r\n        <div >\r\n        </div>\r\n\r\n        <SocketPage isAdmin={this.props.isAdmin}\r\n          changeGamePhase={this.props.changeGamePhase}\r\n          gameBegan={this.state.gameBegan}\r\n          tags={this.state.imageTags}\r\n          changeTagsInState={this.changeTagsInState}\r\n          changeImageURLSInState={this.changeImageURLSInState}\r\n          imageURL={this.state.inputValue}\r\n          urlArray={this.state.imageURLs}\r\n        />\r\n      </div >\r\n    )\r\n  }\r\n\r\n}\r\n\r\n\r\nexport default GameBestTags;","import React, { Component } from 'react';\r\n\r\nclass Images extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        Click on your favorite!\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\n\r\nexport default Images;","import React, { Component } from 'react';\r\nimport {Link, Redirect} from \"react-router-dom\";\r\n\r\nclass Login extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      name: \"\"\r\n    }\r\n  }\r\n\r\n  changeNameInLocalState = (event) => {\r\n    let newState = {...this.state};\r\n    newState.name = event.target.value;\r\n    this.setState(newState);\r\n  }\r\n\r\n  checkDatabaseForNameEntered = () => {\r\n    this.props.checkDatabaseForNameEntered(this.state.name);\r\n  }\r\n\r\n  addEnteredNameIntoDatabase = () => {\r\n    if (this.state.name !==\"\") {\r\n    this.props.addEnteredNameIntoDatabase(this.state.name);\r\n    } else {\r\n      alert(\"you can't register without a username!\");  \r\n    }\r\n  }\r\n\r\n  render() {\r\n    if(this.props.redirectTo) {\r\n      return <Redirect to={this.props.redirectTo} />\r\n    } \r\n    return (\r\n      <div>\r\n        <input type=\"text\" value={this.state.name} onChange={this.changeNameInLocalState}/>\r\n        <Link to=\"/\"><button onClick={this.checkDatabaseForNameEntered}>Login</button></Link>\r\n        <Link to=\"/\"><button onClick={this.addEnteredNameIntoDatabase}>Register</button></Link>\r\n        { this.props.showError\r\n        ? <p>USER NOT FOUND!</p>\r\n        : <p></p>\r\n      } \r\n      </div> \r\n    )\r\n  }\r\n\r\n}\r\n\r\n\r\nexport default Login;","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport { Redirect } from 'react-router';\r\nimport './App.css';\r\nimport '../node_modules/font-awesome/css/font-awesome.min.css';\r\nimport NavBar from \"./components/navBar\";\r\nimport Homepage from './components/homepage/homepage';\r\nimport GameBestTags from './components/game-best-tags/game-best-tags';\r\nimport Login from './components/login';\r\nimport Axios from 'axios';\r\n\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      userFound: false,\r\n      currentUser: {},\r\n      showError: false,\r\n      redirectTo: null,\r\n      isAdmin: false,\r\n      gamePhase: 0\r\n    }\r\n  }\r\n\r\n  getImageTags(str) {\r\n    return Axios.get('/image', {\r\n      params: {\r\n        str: str\r\n      }\r\n    })\r\n    // .then((response) => {\r\n    //   console.log(response.data.concepts);\r\n    // })\r\n    // .catch(function (error) {\r\n    //   console.log(error)\r\n    // })\r\n  }\r\n\r\n  checkDatabaseForNameEntered = async (str) => {\r\n    if (str === \"\") {\r\n      alert(\"Please enter a name!\")\r\n    } else {\r\n      let data = await Axios.get(`/users/${str}`)\r\n      if (data.data[0]) {\r\n        this.setState({\r\n          currentUser: data.data[0],\r\n          userFound: true,\r\n          redirectTo: \"/homepage\"\r\n        })\r\n      } else {\r\n        this.setState({\r\n          showError: true\r\n        })\r\n      }\r\n      console.log(this.state)\r\n    }\r\n  }\r\n\r\n  addEnteredNameIntoDatabase = async (str) => {\r\n    let data = await Axios.get(`/users/${str}`)\r\n    if (data.data[0]) {\r\n      console.log(data.data[0])\r\n      this.setState({\r\n        currentUser: data.data[0],\r\n        userFound: true,\r\n        redirectTo: \"/homepage\"\r\n      })\r\n    } else {\r\n      let newUser = {\r\n        userName: str,\r\n        bestTagsTotalScoreHistory: 0,\r\n        tags: []\r\n      }\r\n      Axios.post('/users', newUser)\r\n        .then((data) => {\r\n          console.log(\"added\")\r\n          this.setState({\r\n            currentUser: newUser,\r\n            userFound: true,\r\n            redirectTo: \"/homepage\"\r\n          })\r\n        })\r\n        .catch((err) => {\r\n          console.log(err)\r\n        })\r\n    }\r\n  }\r\n\r\n\r\n  logOut = () => {\r\n    this.setState({ userFound: false })\r\n  }\r\n\r\n  isAdmin = (value) => {\r\n    if (value === 1) {\r\n      this.setState({\r\n        isAdmin: true\r\n      })\r\n    }\r\n  }\r\n\r\n  changeGamePhase = (num) => {\r\n    this.setState({ gamePhase: num })\r\n  }\r\n\r\n  logOut = () => {\r\n    console.log('homepage')\r\n    this.props.logOut()\r\n  }\r\n\r\n  render() {\r\n    let to = this.state.userFound ? \"/homepage\" : \"/login\";\r\n    return (\r\n      <Router>\r\n        <div className=\"App\">\r\n          <div className=\"header\">\r\n            <div className=\"headerLeft\"></div>\r\n            <div className=\"headerMid\">\r\n              <NavBar logOut={this.logOut} />\r\n\r\n              <Route path=\"/\" exact\r\n                render={() =>\r\n                  <Redirect to={to} />} />\r\n              {/* <Route path=\"/\" exact\r\n            render={() =>\r\n              <Redirect to=\"/login\" />}\r\n          /> */}\r\n              {/* <Route path=\"/\" exact\r\n            render={() =>\r\n              ((this.state.userFound) ? (\r\n                <Redirect to=\"/homepage\" />\r\n                ) :\r\n                <Redirect to=\"/login\" />\r\n                )\r\n              }\r\n            /> */}\r\n              <Route path=\"/login\" exact\r\n                render={() =>\r\n                  <Login\r\n                    showError={this.state.showError}\r\n                    checkDatabaseForNameEntered={this.checkDatabaseForNameEntered}\r\n                    addEnteredNameIntoDatabase={this.addEnteredNameIntoDatabase}\r\n                    redirectTo={this.state.redirectTo}\r\n                  />}\r\n              />\r\n              <Route path=\"/homepage\" exact\r\n                render={() =>\r\n                  <Homepage logOut={this.logOut} />}\r\n              />\r\n            </div>\r\n            <div className=\"headerRight\"></div>\r\n          </div>\r\n          <Route path=\"/game\" exact\r\n            render={() =>\r\n              <GameBestTags\r\n                getImageTags={this.getImageTags}\r\n                isAdmin={this.isAdmin}\r\n                gamePhase={this.state.gamePhase}\r\n                isAdminState={this.state.isAdmin}\r\n                changeGamePhase={this.changeGamePhase}\r\n              />}\r\n          />\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}